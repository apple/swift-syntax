#if !canImport(ObjectiveC)
import XCTest

extension AbsolutePositionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AbsolutePositionTests = [
        ("testClosure", testClosure),
        ("testCurrentFile", testCurrentFile),
        ("testImplicit", testImplicit),
        ("testRecursion", testRecursion),
        ("testRename", testRename),
        ("testSourceLocation", testSourceLocation),
        ("testTrivias", testTrivias),
        ("testVisitor", testVisitor),
        ("testWithoutSourceFileRoot", testWithoutSourceFileRoot),
    ]
}

extension ClassificationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClassificationTests = [
        ("testClassification", testClassification),
        ("testTokenClassification", testTokenClassification),
    ]
}

extension CustomReflectableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CustomReflectableTests = [
        ("testConformanceToCustomReflectable", testConformanceToCustomReflectable),
        ("testDump", testDump),
    ]
}

extension DiagnosticTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DiagnosticTests = [
        ("testDiagnosticEmission", testDiagnosticEmission),
        ("testSourceLocations", testSourceLocations),
    ]
}

extension IncrementalParsingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IncrementalParsingTests = [
        ("testIncrementalInvalid", testIncrementalInvalid),
        ("testReusedNode", testReusedNode),
    ]
}

extension MultithreadingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MultithreadingTests = [
        ("testPathological", testPathological),
        ("testTwoAccesses", testTwoAccesses),
    ]
}

extension ParseFileTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseFileTests = [
        ("testEnumCaseStructure", testEnumCaseStructure),
        ("testParseSingleFile", testParseSingleFile),
    ]
}

extension SyntaxChildrenTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxChildrenTests = [
        ("testIterateWithAllMissing", testIterateWithAllMissing),
        ("testIterateWithAllPresent", testIterateWithAllPresent),
        ("testIterateWithSomeMissing", testIterateWithSomeMissing),
    ]
}

extension SyntaxCollectionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxCollectionsTests = [
        ("testAppendingElement", testAppendingElement),
        ("testInsertingElement", testInsertingElement),
        ("testIteration", testIteration),
        ("testPrependingElement", testPrependingElement),
        ("testRemovingElement", testRemovingElement),
        ("testRemovingFirstElement", testRemovingFirstElement),
        ("testRemovingLastElement", testRemovingLastElement),
        ("testReplacingElement", testReplacingElement),
    ]
}

extension SyntaxFactoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxFactoryTests = [
        ("testFunctionCallSyntaxBuilder", testFunctionCallSyntaxBuilder),
        ("testGenerated", testGenerated),
        ("testTokenSyntax", testTokenSyntax),
        ("testUnknownSyntax", testUnknownSyntax),
        ("testWithOptionalChild", testWithOptionalChild),
    ]
}

extension SyntaxTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxTests = [
        ("testPositions", testPositions),
        ("testSyntaxAPI", testSyntaxAPI),
    ]
}

extension SyntaxTreeModifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxTreeModifierTests = [
        ("testAccessorAsModifier", testAccessorAsModifier),
    ]
}

extension SyntaxVisitorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxVisitorTests = [
        ("testBasic", testBasic),
        ("testRewritingNodeWithEmptyChild", testRewritingNodeWithEmptyChild),
        ("testSyntaxRewriterVisitAny", testSyntaxRewriterVisitAny),
        ("testSyntaxRewriterVisitCollection", testSyntaxRewriterVisitCollection),
        ("testVisitorClass", testVisitorClass),
    ]
}

extension TokenTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TokenTests = [
        ("testKeywordKinds", testKeywordKinds),
        ("testTokenLgnth", testTokenLgnth),
    ]
}

extension TriviaTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TriviaTests = [
        ("testTriviaEquatable", testTriviaEquatable),
        ("testTriviaPieceEquatable", testTriviaPieceEquatable),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AbsolutePositionTests.__allTests__AbsolutePositionTests),
        testCase(ClassificationTests.__allTests__ClassificationTests),
        testCase(CustomReflectableTests.__allTests__CustomReflectableTests),
        testCase(DiagnosticTests.__allTests__DiagnosticTests),
        testCase(IncrementalParsingTests.__allTests__IncrementalParsingTests),
        testCase(MultithreadingTests.__allTests__MultithreadingTests),
        testCase(ParseFileTests.__allTests__ParseFileTests),
        testCase(SyntaxChildrenTests.__allTests__SyntaxChildrenTests),
        testCase(SyntaxCollectionsTests.__allTests__SyntaxCollectionsTests),
        testCase(SyntaxFactoryTests.__allTests__SyntaxFactoryTests),
        testCase(SyntaxTests.__allTests__SyntaxTests),
        testCase(SyntaxTreeModifierTests.__allTests__SyntaxTreeModifierTests),
        testCase(SyntaxVisitorTests.__allTests__SyntaxVisitorTests),
        testCase(TokenTests.__allTests__TokenTests),
        testCase(TriviaTests.__allTests__TriviaTests),
    ]
}
#endif
