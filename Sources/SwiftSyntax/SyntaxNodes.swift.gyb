%{
  # -*- mode: Swift -*-
  from gyb_syntax_support import *
  from gyb_syntax_support.Traits import TRAITS
  NODE_MAP = create_node_map()
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxNodes.swift.gyb.
//// Do Not Edit Directly!
//===------------ SyntaxNodes.swift - Syntax Node definitions -------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import _InternalSwiftSyntaxParser

%{
"""
Each Syntax node implements the protocol of a more generic node. For example,
StructDeclSyntax implements DeclSyntax and can be used in contexts
where DeclSyntax is expected.

Each node will have:
- An accessor for each child that will lazily instantiate it.
- A `withX(_ x: XSyntax)` method for each child that will return a new Syntax
  node with the existing X child replaced with the passed-in version. This is a
  way to incrementally transform nodes in the tree.
- An `addX(_ x: XSyntax)` method for children that are collections. This will
  append the provided node to the collection and return a new node with that
  collection replaced.
"""
}%

/// Provide all the cusotmised casting functions for Syntax nodes
extension Syntax {
  public func `is`<S: SyntaxProtocol>(_ syntaxType: S.Type) -> Bool {
    return self.as(syntaxType) != nil
  }

  public func `as`<S: SyntaxProtocol>(_ syntaxType: S.Type) -> S? {
    return S.init(self)
  }
}

/// A wrapper around a raw Syntax layout.
public struct UnknownSyntax: SyntaxProtocol {
  public let _syntaxNode: Syntax

  /// Convert the given `Syntax` node to an `UnknownSyntax` if possible. Return 
  /// `nil` if the conversion is not possible.
  public init?(_ syntax: Syntax) {
    guard syntax.raw.kind == .unknown else { return nil }
    self._syntaxNode = syntax
  }

  /// Creates an `UnknownSyntax` node from the given `SyntaxData`. This assumes 
  /// that the `SyntaxData` is of the correct kind. If it is not, the behaviour
  /// is undefined.
  internal init(_ data: SyntaxData) {
    assert(data.raw.kind == .unknown)
    self._syntaxNode = Syntax(data)
  }
}

extension UnknownSyntax: CustomReflectable {
  public var customMirror: Mirror {
    return Mirror(self, children: [:])
  }
}

/// A Syntax node representing a single token.
public struct TokenSyntax: SyntaxProtocol {
  public let _syntaxNode: Syntax

  /// Converts the given `Syntax` node to a `TokenSyntax` if possible. Returns
  /// `nil` if the conversion is not possible.
  public init?(_ syntax: Syntax) {
    guard syntax.raw.kind == .token else { return nil }
    self._syntaxNode = syntax
  }

  /// Creates a Syntax node from the given `SyntaxData`. This assumes
  /// that the `SyntaxData` is of the correct kind. If it is not, the behaviour
  /// is undefined.
  internal init(_ data: SyntaxData) {
    assert(data.raw.kind == .token)
    self._syntaxNode = Syntax(data)
  }

  public var presence: SourcePresence {
    return raw.presence
  }

  /// The text of the token as written in the source code.
  public var text: String {
    return tokenKind.text
  }

  /// Returns a new TokenSyntax with its kind replaced
  /// by the provided token kind.
  public func withKind(_ tokenKind: TokenKind) -> TokenSyntax {
    guard raw.kind == .token else {
      fatalError("TokenSyntax must have token as its raw")
    }
    let newRaw = RawSyntax.createAndCalcLength(kind: tokenKind,
      leadingTrivia: raw.formLeadingTrivia()!, trailingTrivia: raw.formTrailingTrivia()!,
      presence: raw.presence)
    let newData = data.replacingSelf(newRaw)
    return TokenSyntax(newData)
  }

  /// Returns a new TokenSyntax with its leading trivia replaced
  /// by the provided trivia.
  public func withLeadingTrivia(_ leadingTrivia: Trivia) -> TokenSyntax {
    guard raw.kind == .token else {
      fatalError("TokenSyntax must have token as its raw")
    }
    return TokenSyntax(data.withLeadingTrivia(leadingTrivia))
  }

  /// Returns a new TokenSyntax with its trailing trivia replaced
  /// by the provided trivia.
  public func withTrailingTrivia(_ trailingTrivia: Trivia) -> TokenSyntax {
    guard raw.kind == .token else {
      fatalError("TokenSyntax must have token as its raw")
    }
    return TokenSyntax(data.withTrailingTrivia(trailingTrivia))
  }

  /// Returns a new TokenSyntax with its leading trivia removed.
  public func withoutLeadingTrivia() -> TokenSyntax {
    return withLeadingTrivia([])
  }

  /// Returns a new TokenSyntax with its trailing trivia removed.
  public func withoutTrailingTrivia() -> TokenSyntax {
    return withTrailingTrivia([])
  }

  /// Returns a new TokenSyntax with all trivia removed.
  public func withoutTrivia() -> TokenSyntax {
    return withoutLeadingTrivia().withoutTrailingTrivia()
  }

  /// The leading trivia (spaces, newlines, etc.) associated with this token.
  public var leadingTrivia: Trivia {
    get {
      return raw.formTokenLeadingTrivia()!
    }
    set {
      self = withLeadingTrivia(newValue)
    }
  }

  /// The trailing trivia (spaces, newlines, etc.) associated with this token.
  public var trailingTrivia: Trivia {
    get {
      return raw.formTokenTrailingTrivia()!
    }
    set {
      self = withTrailingTrivia(newValue)
    }
  }

  /// The kind of token this node represents.
  public var tokenKind: TokenKind {
    get {
      return raw.formTokenKind()!
    }
    set {
      self = withKind(newValue)
    }
  }

  /// The length this node takes up spelled out in the source, excluding its
  /// leading or trailing trivia.
  public var contentLength: SourceLength {
    return raw.tokenContentLength
  }

  /// The length this node's leading trivia takes up spelled out in source.
  public var leadingTriviaLength: SourceLength {
    return raw.tokenLeadingTriviaLength
  }

  /// The length this node's trailing trivia takes up spelled out in source.
  public var trailingTriviaLength: SourceLength {
    return raw.tokenTrailingTriviaLength
  }

  /// The length of this node including all of its trivia.
  public var totalLength: SourceLength {
    return raw.totalLength
  }
}

extension TokenSyntax: CustomReflectable {
  public var customMirror: Mirror {
    return Mirror(self, children: [
      "text": text,
      "leadingTrivia": leadingTrivia,
      "trailingTrivia": trailingTrivia,
      "tokenKind": tokenKind,
    ])
  }
}


% for node in SYNTAX_NODES:
%   base_type = node.base_type
/// Protocol to which all `${node.name}` nodes conform. Extension point to add
/// common methods to all `${node.name}` nodes. 
/// DO NOT CONFORM TO THIS PROTOCOL YOURSELF!
public protocol ${node.name}Protocol: ${base_type}Protocol {}

%   if node.is_base():
%     for line in dedented_lines(node.description):
/// ${line}
%     end
public struct ${node.name}: ${node.name}Protocol {
  public let _syntaxNode: Syntax

  public init<S: ${node.name}Protocol>(_ syntax: S) {
    // We know this cast is going to succeed. Go through init(_: SyntaxData)
    // to do a sanity check and verify the kind matches in debug builds and get
    // maximum performance in release builds.
    self.init(syntax._syntaxNode.data)
  }

  /// Converts the given `Syntax` node to a `${node.name}` if possible. Returns 
  /// `nil` if the conversion is not possible.
  public init?(_ syntax: Syntax) {
    switch syntax.raw.kind {
%     castable_kinds = ['.' + child_node.swift_syntax_kind for child_node \
%                       in SYNTAX_NODES \
%                       if child_node.base_kind == node.syntax_kind]
    case ${', '.join(castable_kinds)}:
      self._syntaxNode = syntax
    default:
      return nil
    }
  }

  /// Creates a `${node.name}` node from the given `SyntaxData`. This assumes 
  /// that the `SyntaxData` is of the correct kind. If it is not, the behaviour
  /// is undefined.
  internal init(_ data: SyntaxData) {
    // Assert that the kind of the given data matches in debug builds.
#if DEBUG
    switch data.raw.kind {
%     castable_kinds = ['.' + child_node.swift_syntax_kind for child_node \
%                       in SYNTAX_NODES \
%                       if child_node.base_kind == node.syntax_kind]
    case ${', '.join(castable_kinds)}:
      break
    default:
      fatalError("Unable to create ${node.name} from \(data.raw.kind)")
    }
#endif

    self._syntaxNode = Syntax(data)
  }

  public func `is`<S: ${node.name}Protocol>(_ syntaxType: S.Type) -> Bool {
    return self.as(syntaxType) != nil
  }

  public func `as`<S: ${node.name}Protocol>(_ syntaxType: S.Type) -> S? {
    return S.init(_syntaxNode)
  }
}

%   elif node.collection_element:
%     pass
%   else:

%     for line in dedented_lines(node.description):
/// ${line}
%     end
public struct ${node.name}: ${base_type}Protocol {
%     if node.children:
  enum Cursor: Int {
%       for child in node.children:
    case ${child.swift_name}
%       end
  }
%     end

  public let _syntaxNode: Syntax

  /// Converts the given `Syntax` node to a `${node.name}` if possible. Returns 
  /// `nil` if the conversion is not possible.
  public init?(_ syntax: Syntax) {
    guard syntax.raw.kind == .${node.swift_syntax_kind} else { return nil }
    self._syntaxNode = syntax
  }

  /// Creates a `${node.name}` node from the given `SyntaxData`. This assumes 
  /// that the `SyntaxData` is of the correct kind. If it is not, the behaviour
  /// is undefined.
  internal init(_ data: SyntaxData) {
    assert(data.raw.kind == .${node.swift_syntax_kind})
    self._syntaxNode = Syntax(data)
  }

%     for child in node.children:
%       child_node = NODE_MAP.get(child.syntax_kind)
%       ret_type = child.type_name
%       if child.is_optional:
%         ret_type += '?'
%       end
%       for line in dedented_lines(child.description):
  /// ${line}
%       end
  public var ${child.swift_name}: ${ret_type} {
    get {
      let childData = data.child(at: Cursor.${child.swift_name}, 
                                 parent: Syntax(self))
%       if child.is_optional:
      if childData == nil { return nil }
%       end
      return ${child.type_name}(childData!)
    }
    set(value) {
      self = with${child.name}(value)
    }
  }
%       if child_node and child_node.is_syntax_collection():
%         child_elt = child.collection_element_name
%         child_elt_type = child_node.collection_element_type
%         if not child_elt:
%           raise Exception("'collection_element_name' should be set for '%s' of '%s'" % (child.name, node.name))
%         end

  /// Adds the provided `${child_elt}` to the node's `${child.swift_name}`
  /// collection.
  /// - param element: The new `${child_elt}` to add to the node's
  ///                  `${child.swift_name}` collection.
  /// - returns: A copy of the receiver with the provided `${child_elt}`
  ///            appended to its `${child.swift_name}` collection.
  public func add${child_elt}(_ element: ${child_elt_type}) -> ${node.name} {
    var collection: RawSyntax
    if let col = raw[Cursor.${child.swift_name}] {
      collection = col.appending(element.raw)
    } else {
      collection = RawSyntax.create(kind: SyntaxKind.${child_node.swift_syntax_kind},
        layout: [element.raw], length: element.raw.totalLength, presence: .present)
    }
    let newData = data.replacingChild(collection,
                                      at: Cursor.${child.swift_name})
    return ${node.name}(newData)
  }
%       end

  /// Returns a copy of the receiver with its `${child.swift_name}` replaced.
  /// - param newChild: The new `${child.swift_name}` to replace the node's
  ///                   current `${child.swift_name}`, if present.
  public func with${child.name}(
    _ newChild: ${child.type_name}?) -> ${node.name} {
%       if child.is_optional:
    let raw = newChild?.raw
%       else:
    let raw = newChild?.raw ?? ${make_missing_swift_child(child)}
%       end
    let newData = data.replacingChild(raw, at: Cursor.${child.swift_name})
    return ${node.name}(newData)
  }
%     end

  /// Returns a new `${node.name}` with its leading trivia replaced
  /// by the provided trivia.
  public func withLeadingTrivia(_ leadingTrivia: Trivia) -> ${node.name} {
    return ${node.name}(data.withLeadingTrivia(leadingTrivia))
  }

  /// Returns a new `${node.name}` with its trailing trivia replaced
  /// by the provided trivia.
  public func withTrailingTrivia(_ trailingTrivia: Trivia) -> ${node.name} {
    return ${node.name}(data.withTrailingTrivia(trailingTrivia))
  }

  /// Returns a new `${node.name}` with its leading trivia removed.
  public func withoutLeadingTrivia() -> ${node.name} {
    return withLeadingTrivia([])
  }

  /// Returns a new `${node.name}` with its trailing trivia removed.
  public func withoutTrailingTrivia() -> ${node.name} {
    return withTrailingTrivia([])
  }

  /// Returns a new `${node.name}` with all trivia removed.
  public func withoutTrivia() -> ${node.name} {
    return withoutLeadingTrivia().withoutTrailingTrivia()
  }

  /// The leading trivia (spaces, newlines, etc.) associated with this `${node.name}`.
  public var leadingTrivia: Trivia? {
    get {
      return raw.formLeadingTrivia()
    }
    set {
      self = withLeadingTrivia(newValue ?? [])
    }
  }

  /// The trailing trivia (spaces, newlines, etc.) associated with this `${node.name}`.
  public var trailingTrivia: Trivia? {
    get {
      return raw.formTrailingTrivia()
    }
    set {
      self = withTrailingTrivia(newValue ?? [])
    }
  }
}
%   end
% end

/// Enum to exhaustively switch over all different syntax nodes.
public enum SyntaxEnum {
  case unknown(UnknownSyntax)
  case token(TokenSyntax)
% for node in SYNTAX_NODES:
%   if node.is_base():
  case ${node.swift_syntax_kind}(Unknown${node.name})
%   else:
  case ${node.swift_syntax_kind}(${node.name})
%   end
% end
}

public extension Syntax {
  /// Get an enum that can be used to exhaustively switch over all syntax nodes.
  var asSyntaxEnum: SyntaxEnum {
    switch raw.kind {
    case .token:
      return .token(TokenSyntax(self)!)
    case .unknown:
      return .unknown(UnknownSyntax(self)!)
% for node in SYNTAX_NODES:
    case .${node.swift_syntax_kind}:
%   if node.is_base():
      return .${node.swift_syntax_kind}(Unknown${node.name}(self)!)
%   else:
      return .${node.swift_syntax_kind}(${node.name}(self)!)
%   end
% end
    }
  }

  /// Retrieve the concretely typed node that this Syntax node wraps.
  /// This property is exposed for testing purposes only.
  var _asConcreteType: Any {
    switch self.asSyntaxEnum {
    case .token(let node):
      return node
    case .unknown(let node):
      return node
% for node in SYNTAX_NODES:
    case .${node.swift_syntax_kind}(let node):
      return node
% end
    }
  }
}

extension Syntax: CustomReflectable {
  /// Reconstructs the real syntax type for this type from the node's kind and 
  /// provides a mirror that reflects this type.
  public var customMirror: Mirror {
    return Mirror(reflecting: self._asConcreteType)
  }
}

% for node in SYNTAX_NODES:
%   if node.is_base():
extension ${node.name}: CustomReflectable {
  /// Reconstructs the real syntax type for this type from the node's kind and 
  /// provides a mirror that reflects this type.
  public var customMirror: Mirror {
    return Mirror(reflecting: Syntax(self)._asConcreteType)
  }
}
%   elif node.is_syntax_collection():
%     pass
%   else:
extension ${node.name}: CustomReflectable {
  public var customMirror: Mirror {
    return Mirror(self, children: [
%     for child in node.children:
%       if child.is_optional:
      "${child.swift_name}": ${child.swift_name}.map(Syntax.init)?._asConcreteType as Any,
%       else:
      "${child.swift_name}": Syntax(${child.swift_name})._asConcreteType,
%       end
%     end
    ])
  }
}
%   end
% end

% for trait in TRAITS:
public protocol ${trait.trait_name}Syntax: SyntaxProtocol {
% for child in trait.children:
%   ret_type = child.type_name
%   if child.is_optional:
%       ret_type += '?'
%   end
  var ${child.swift_name}: ${ret_type} { get }
  func with${child.name}(_ newChild: ${child.type_name}?) -> Self
% end
}
% end

% for node in SYNTAX_NODES:
%   base_type = node.base_type
%   if node.is_base():
%     pass
%   elif node.collection_element:
%     pass
%   elif node.traits:
%     traits_list = ", ".join(trait + 'Syntax' for trait in node.traits)
extension ${node.name}: ${traits_list} {}
%   end
% end

extension SyntaxNode {
  public var isUnknown: Bool { return raw.kind.isUnknown }
  public var asUnknown: UnknownSyntax? {
    guard isUnknown else { return nil }
    return UnknownSyntax(asSyntaxData)
  }
% for node in SYNTAX_NODES:
%   if not node.is_base():

  public var is${node.syntax_kind}: Bool { return raw.kind == .${node.swift_syntax_kind} }
  public var as${node.syntax_kind}: ${node.name}? {
    guard is${node.syntax_kind} else { return nil }
    return ${node.name}(asSyntaxData)
  }
%   end
% end
}

/// MARK: Convenience methods

extension StructDeclSyntax {
  /// Creates a new StructDeclSyntax with the provided name as its identifier.
  /// - param name: The new struct's name.
  /// - returns: A new StructDeclSyntax with the same fields as the receiver,
  ///            but with the provided identifier.
  func withIdentifier(_ name: String) -> StructDeclSyntax {
    let newToken = SyntaxFactory.makeIdentifier(name,
      leadingTrivia: identifier.leadingTrivia,
      trailingTrivia: identifier.trailingTrivia)
    return withIdentifier(newToken)
  }
}

extension SyntaxParser {
  static func verifyNodeDeclarationHash() -> Bool {
    return String(cString: swiftparse_syntax_structure_versioning_identifier()!) ==
      "${calculate_node_hash()}"
  }
}
