%{
  from gyb_syntax_support import *
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxFactory.swift.gyb.
//// Do Not Edit Directly!
//===------------ SyntaxRewriter.swift - Syntax Rewriter class ------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines the SyntaxRewriter, a class that performs a standard walk
// and tree-rebuilding pattern.
//
// Subclassers of this class can override the walking behavior for any syntax
// node and transform nodes however they like.
//
//===----------------------------------------------------------------------===//

open class SyntaxRewriter {
  public init() {}
% for node in SYNTAX_NODES:
%   if is_visitable(node):
  open func visit(_ node: ${node.name}) -> ${node.base_type} {
%   cast = ('as! ' + node.base_type) if node.base_type != 'Syntax' else ''
    return visitChildren(of: node) ${cast}
  }

%   end
% end

  open func visit(_ token: TokenSyntax) -> Syntax {
    return token
  }

  /// The function called before visiting the node and its descendents.
  ///   - node: the node we are about to visit.
  open func visitPre(_ node: Syntax) {}

  /// Override point to choose custom visitation dispatch instead of the
  /// specialized `visit(_:)` methods. Use this instead of those methods if
  /// you intend to dynamically dispatch rewriting behavior.
  /// - note: If this method returns a non-nil result, the specialized
  ///         `visit(_:)` methods will not be called for this node.
  open func visitAny(_ node: Syntax) -> Syntax? {
    return nil
  }

  /// The function called after visting the node and its descendents.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: Syntax) {}

  public func visit(_ node: Syntax) -> Syntax {
    visitPre(node)
    defer { visitPost(node) }

    // If the global visitor returned non-nil, skip specialized dispatch.
    if let newNode = visitAny(node) {
      return newNode
    }

    switch node.raw.kind {
    case .token: return visit(node as! TokenSyntax)
% for node in SYNTAX_NODES:
%   if is_visitable(node):
    case .${node.swift_syntax_kind}: return visit(node as! ${node.name})
%   end
% end
    default: return visitChildren(of: node)
    }
  }

  /// Visit the children of `node` without visiting `node` itself. Use this
  /// method when you want `visitAny(_:)` to recurse into child nodes. If you're
  /// using specialized vistors, `super.visit(_:)` will do the same thing.
  ///
  /// - Returns: A copy of `node` with its visited children rewritten.
  public func visitChildren(of node: Syntax) -> Syntax {
    // Visit all children of this node, returning `nil` if child is not
    // present. This will ensure that there are always the same number
    // of children after transforming.
    let newLayout = (0..<node.numberOfChildren).map { (i: Int) -> RawSyntax? in
      guard let child = node.child(at: i) else { return nil }
      return visit(child).raw
    }

    // Sanity check, ensure the new children are the same length.
    assert(newLayout.count == node.raw.layout.count)

    return makeSyntax(node.raw.replacingLayout(newLayout))
  }
}

/// The enum describes how the SyntaxVistor should continue after visiting
/// the current node.
public enum SyntaxVisitorContinueKind {

  /// The visitor should visit the descendents of the current node.
  case visitChildren

  /// The visitor should avoid visiting the descendents of the current node.
  case skipChildren
}

open class SyntaxVisitor {
    public init() {}
% for node in SYNTAX_NODES:
%   if is_visitable(node):
  /// Visting ${node.name} specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ${node.name}) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
%   end
% end

  /// Visting UnknownSyntax specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnknownSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// Whether we should ever visit a given syntax kind.
  ///   - Parameter kind: the input kind we're checking.
  ///   - Returns: whether we should visit syntax nodes of this kind.
  open func shouldVisit(_ kind: SyntaxKind) -> Bool {
    return true
  }

  /// Whether we should ever visit a given token kind.
  ///   - Parameter kind: the input token kind we're checking.
  ///   - Returns: whether we should visit tokens of this kind.
  open func shouldVisit(_ kind: TokenKind) -> Bool {
    return true
  }

  open func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
    return .skipChildren
  }

  /// The function called before visiting the node and its descendents.
  ///   - node: the node we are about to visit.
  open func visitPre(_ node: Syntax) {}

  /// The function called after visting the node and its descendents.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: Syntax) {}

  public func visit(_ node: Syntax) -> SyntaxVisitorContinueKind {
    switch node.raw.kind {
    case .token: return visit(node as! TokenSyntax)
% for node in SYNTAX_NODES:
%   if is_visitable(node):
    case .${node.swift_syntax_kind}: return visit(node as! ${node.name})
%   end
% end
    case .unknown: return visit(node as! UnknownSyntax)
    default: return .skipChildren
    }
  }
}


/// A wrapper over Syntax. A syntax node is only realized when explicitly asked;
/// otherwise the node is represented as a child index list from a realized
/// ancestor.
class PendingSyntaxNode {
  let parent: PendingSyntaxNode!
  private var kind: PendingSyntaxNodeKind

  private enum PendingSyntaxNodeKind {
    /// We already have a `Syntax` node realised for this node
    case realized(node: Syntax)
    /// This node does not have a `Syntax` node instantiated yet. If needed, we
    /// need to compute it from its parent RawSyntax node
    case virtual(index: Int)
  }

  var node: Syntax {
    switch kind {
    case .realized(let node):
      return node
    case .virtual(let index):
      let _node = parent.node.child(at: index)!
      kind = .realized(node: _node)
      return _node
    }
  }

  init(_ root: Syntax) {
    self.parent = nil
    self.kind = .realized(node: root)
  }

  init(_ parent: PendingSyntaxNode, _ idx: Int) {
    self.parent = parent
    self.kind = .virtual(index: idx)
  }
}


/// The raw syntax walker traverses the raw syntax tree to find
/// node kinds the SyntaxVisitor is interested and feed these syntax nodes to
/// SyntaxVisitor.
/// By traversing the raw syntax tree, we avoid realizing syntax nodes that're
/// not interesting to users' SyntaxVisitor.
class RawSyntaxVisitor {
  private let visitor: SyntaxVisitor
  private var currentNode: PendingSyntaxNode!

  required init(_ visitor: SyntaxVisitor, _ root: Syntax) {
    self.visitor = visitor
    self.currentNode = PendingSyntaxNode(root)
  }

  func shouldVisit(_ kind: SyntaxKind) -> Bool {
    return visitor.shouldVisit(kind)
  }

  func shouldVisit(_ kind: TokenKind) -> Bool {
    return visitor.shouldVisit(kind)
  }

  func addChildIdx(_ idx: Int) {
    currentNode = PendingSyntaxNode(currentNode, idx)
  }

  func moveUp() {
    currentNode = currentNode.parent
  }

  func visitPre() {
    visitor.visitPre(currentNode.node)
  }

  func visitPost() {
    visitor.visitPost(currentNode.node)
  }

  // The current raw syntax node is interesting for the user, so realize a
  // correponding syntax node and feed it into the visitor.
  func visit() -> SyntaxVisitorContinueKind {
    return visitor.visit(currentNode.node)
  }
}

extension Syntax {
  public func walk(_ visitor: SyntaxVisitor) {

    // Traverse the raw syntax tree by using the current syntax node as root.
    data.raw.accept(RawSyntaxVisitor(visitor, self))
  }
}

public enum SyntaxVerifierError: Error, CustomStringConvertible {
  case unknownSyntaxFound(node: Syntax)

  public var description: String {
    switch self {
      case .unknownSyntaxFound(let node):
        return "unknown syntax node for \"\(node)\""
    }
  }
}

public class SyntaxVerifier: SyntaxVisitor {

  var unknownNodes: [Syntax] = []

  override public func shouldVisit(_ node: SyntaxKind) -> Bool {
    return node.isUnknown
  }

  override public func shouldVisit(_ node: TokenKind) -> Bool {
    return false
  }

  override public func visitPre(_ node: Syntax) {
    assert(node.isUnknown)
    unknownNodes.append(node)
  }

  private func verify(_ node: Syntax) throws {
    node.walk(self)
    if let unknownNode = unknownNodes.first {
      throw SyntaxVerifierError.unknownSyntaxFound(node: unknownNode)
    }
  }

  private override init() {}

  public static func verify(_ node: Syntax) throws {
    try SyntaxVerifier().verify(node)
  }
}
