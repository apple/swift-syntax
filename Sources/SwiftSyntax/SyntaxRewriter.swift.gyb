%{
  from gyb_syntax_support import *
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxFactory.swift.gyb.
//// Do Not Edit Directly!
//===------------ SyntaxRewriter.swift - Syntax Rewriter class ------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines the SyntaxRewriter, a class that performs a standard walk
// and tree-rebuilding pattern.
//
// Subclassers of this class can override the walking behavior for any syntax
// node and transform nodes however they like.
//
//===----------------------------------------------------------------------===//

open class SyntaxRewriter {
  public init() {}

  /// Rewrite the given syntax tree.
  ///   - Parameter node: The syntax tree to rewrite
  ///   - Returns: The rewritten syntax tree
  public func rewrite(_ node: Syntax) -> Syntax {
    return visit(node) ?? node
  }

% for node in SYNTAX_NODES:
%   if is_visitable(node):
  /// Visit a `${node.name}`. If it shall be rewritten, return the rewritten 
  /// value. If the node shall not be rewritten, return `nil`.
  /// - note: Returning `nil` for a non-rewritten node is more performant than 
  ///         returning `node` itself.
  ///   - Parameter node: the node that is being visited
  ///   - Returns: the rewritten node or `nil` if the node shall not be replaced
  ///              in the rewritten tree.
  open func visit(_ node: ${node.name}) -> ${node.base_type}? {
%   cast = ('as! ' + node.base_type + '?') if node.base_type != 'Syntax' else ''
    return visitChildren(node) ${cast}
  }

%   end
% end

  /// Visit a `TokenSyntax`. If it shall be rewritten, return the rewritten 
  /// value. If the node shall not be rewritten, return `nil`.
  /// - note: Returning `nil` for a non-rewritten node is more performant than 
  ///         returning `node` itself.
  ///   - Parameter node: the node that is being visited
  ///   - Returns: the rewritten node or `nil` if the node shall not be replaced
  ///              in the rewritten tree.
  open func visit(_ token: TokenSyntax) -> Syntax? {
    return nil
  }
  
  /// Visit a `UnknownSyntax`. If it shall be rewritten, return the rewritten 
  /// value. If the node shall not be rewritten, return `nil`.
  /// - note: Returning `nil` for a non-rewritten node is more performant than 
  ///         returning `node` itself.
  ///   - Parameter node: the node that is being visited
  ///   - Returns: the rewritten node or `nil` if the node shall not be replaced
  ///              in the rewritten tree.
  open func visit(_ node: UnknownSyntax) -> Syntax? {
    return visitChildren(node)
  }

  /// The function called before visiting the node and its descendents.
  ///   - node: the node we are about to visit.
  open func visitPre(_ node: Syntax) {}

  /// Override point to choose custom visitation dispatch instead of the
  /// specialized `visit(_:)` methods. Use this instead of those methods if
  /// you intend to dynamically dispatch rewriting behavior.
  /// - note: If this method returns a non-nil result, the specialized
  ///         `visit(_:)` methods will not be called for this node and the 
  ///         visited node will be replaced by the returned node in the 
  ///         rewritten tree.
  open func visitAny(_ node: Syntax) -> Syntax? {
    return nil
  }

  /// The function called after visiting the node and its descendents.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: Syntax) {}

  /// Visit any Syntax node. If the node has been rewritten, the rewritten node 
  /// is returned. If no rewrite occurred, `nil` is returned.
  /// - note: Use `rewrite` to retrieve the rewritten node or the current node 
  ///         if no rewrite occurred.
  ///   - Parameter node: the node that is being visited
  ///   - Returns: the rewritten node or `nil` if the node has not been 
  ///              rewritten
  public func visit(_ node: Syntax) -> Syntax? {
    return visit(node.base.data)
  }

% for node in SYNTAX_NODES:
  /// Implementation detail of visit(_:). Do not call directly.
  private func visitImpl${node.name}(_ data: SyntaxData) -> Syntax? {
%   if node.is_base():
      let node = Unknown${node.name}(data)
      visitPre(node)
      defer { visitPost(node) }
      if let newNode = visitAny(node) { return newNode }
      return visit(node)
%   else:
      let node = ${node.name}(data)
      visitPre(node)
      defer { visitPost(node) }
      if let newNode = visitAny(node) { return newNode }
      return visit(node)
%   end
  }

% end

  final func visit(_ data: SyntaxData) -> Syntax? {
    // Create the node types directly instead of going through `makeSyntax()`
    // which has additional cost for casting back and forth from `_SyntaxBase`.
    switch data.raw.kind {
    case .token:
      let node = TokenSyntax(data)
      visitPre(node)
      defer { visitPost(node) }
      if let newNode = visitAny(node) { return newNode }
      return visit(node)
    case .unknown:
      let node = UnknownSyntax(data)
      visitPre(node)
      defer { visitPost(node) }
      if let newNode = visitAny(node) { return newNode }
      return visit(node)
    // The implementation of every generated case goes into its own function. This
    // circumvents an issue where the compiler allocates stack space for every
    // case statement next to each other in debug builds, causing it to allocate
    // ~50KB per call to this function. rdar://55929175
  % for node in SYNTAX_NODES:
    case .${node.swift_syntax_kind}:
      return visitImpl${node.name}(data)
  % end
    }
  }

  final func visitChildren(_ nodeS: Syntax) -> Syntax? {
    let node = nodeS.base

    // Walk over all children of this node and rewrite them. Don't store any 
    // rewritten nodes until the first non-`nil` value is encountered. When this 
    // happens, retrieve all previous syntax nodes from the parent node to 
    // initialize the new layout. Once we know that we have to rewrite the 
    // layout, we need to collect all futher children, regardless of whether 
    // they are rewritten or not.
    
    // newLayout is nil until the first child node is rewritten and rewritten 
    // nodes are being collected.
    var newLayout: ContiguousArray<RawSyntax?>?

    for (i, (raw, info)) in RawSyntaxChildren(node).enumerated() {
      guard let child = raw else {
        // Node does not exist. If we are collecting rewritten nodes, we need to 
        // collect this one as well, otherwise we can ignore it.
        if newLayout != nil {
          newLayout!.append(nil)
        }
        continue
      }

      // Build the Syntax node to rewrite
      let absoluteRaw = AbsoluteRawSyntax(raw: child, info: info)
      let data = SyntaxData(absoluteRaw, parent: node)
      
      if let rewritten = visit(data)?.raw {
        // The node was rewritten, let's handle it
        if newLayout == nil {
          // We have not yet collected any previous rewritten nodes. Initialize
          // the new layout with the previous nodes of the parent. This is 
          // possible, since we know they were not rewritten.
          
          // The below implementation is based on Collection.map but directly
          // reserves enough capacity for the entire layout.
          newLayout = ContiguousArray<RawSyntax?>()
          newLayout!.reserveCapacity(node.raw.numberOfChildren)
          for j in 0..<i {
            newLayout!.append(node.raw.child(at: j))
          }
        }
        
        // Now that we know we have a new layout in which we collect rewritten 
        // nodes, add it.
        newLayout!.append(rewritten)
      } else {
        // The node was not changed by the rewriter. Only store it if a previous
        // node has been rewritten and we are collecting a rewritten layout.
        if newLayout != nil {
          newLayout!.append(raw)
        }
      }
    }

    if let newLayout = newLayout {
      // A child node was rewritten. Build the updated node.
      
      // Sanity check, ensure the new children are the same length.
      assert(newLayout.count == node.raw.numberOfChildren)
      
      let newRaw = node.raw.replacingLayout(Array(newLayout))
      return makeSyntax(.forRoot(newRaw))
    } else {
      // No child node was rewritten. So no need to change this node as well.
      return nil
    }

  }
}

/// The enum describes how the SyntaxVistor should continue after visiting
/// the current node.
public enum SyntaxVisitorContinueKind {

  /// The visitor should visit the descendents of the current node.
  case visitChildren

  /// The visitor should avoid visiting the descendents of the current node.
  case skipChildren
}

public protocol SyntaxVisitor {
% for node in SYNTAX_NODES:
%   if is_visitable(node):
  /// Visiting `${node.name}` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  mutating func visit(_ node: ${node.name}) -> SyntaxVisitorContinueKind

  /// The function called after visiting `${node.name}` and its descendents.
  ///   - node: the node we just finished visiting.
  mutating func visitPost(_ node: ${node.name})
%   end
% end

  /// Visiting `TokenSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  mutating func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind

  /// The function called after visiting the node and its descendents.
  ///   - node: the node we just finished visiting.
  mutating func visitPost(_ node: TokenSyntax)

  /// Visiting `UnknownSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  mutating func visit(_ node: UnknownSyntax) -> SyntaxVisitorContinueKind

  /// The function called after visiting the node and its descendents.
  ///   - node: the node we just finished visiting.
  mutating func visitPost(_ node: UnknownSyntax)
}

public extension SyntaxVisitor {
% for node in SYNTAX_NODES:
%   if is_visitable(node):
  mutating func visit(_ node: ${node.name}) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  mutating func visitPost(_ node: ${node.name}) {}
%   end
% end

  mutating func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  mutating func visitPost(_ node: TokenSyntax) {}

  mutating func visit(_ node: UnknownSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  mutating func visitPost(_ node: UnknownSyntax) {}
}

/// A `SyntaxVisitor` that can visit the nodes as generic `Syntax` values.
///
/// This is a separate protocol because this kind of visitation is slower than
/// the type-specific visitation of `SyntaxVisitor`. Use `SyntaxAnyVisitor` if
/// the `visitAny(_)` function would be useful to have, otherwise use
/// `SyntaxVisitor`.
///
/// This works by introducing default implementations of the type-specific
/// visit function that delegate to `visitAny(_)`. A conformant type that
/// provides a custom type-specific visit function, should also call
/// `visitAny(_)` in its implementation, if calling `visitAny` is needed:
///
///     struct MyVisitor: SyntaxAnyVisitor {
///       func visitAny(_ node: Syntax) -> SyntaxVisitorContinueKind {
///         <code>
///       }
///
///       func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
///         <code>
///         // Call this to pass tokens to `visitAny(_)` as well if needed
///         visitAny(token)
///       }
///
public protocol SyntaxAnyVisitor: SyntaxVisitor {
  mutating func visitAny(_ node: Syntax) -> SyntaxVisitorContinueKind
  mutating func visitAnyPost(_ node: Syntax)
}

public extension SyntaxAnyVisitor {
  mutating func visitAnyPost(_ node: Syntax) {}

% for node in SYNTAX_NODES:
%   if is_visitable(node):
  mutating func visit(_ node: ${node.name}) -> SyntaxVisitorContinueKind {
    return visitAny(node)
  }
  mutating func visitPost(_ node: ${node.name}) {
    return visitAnyPost(node)
  }
%   end
% end

  mutating func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
    return visitAny(token)
  }
  mutating func visitPost(_ node: TokenSyntax) {
    return visitAnyPost(node)
  }

  mutating func visit(_ node: UnknownSyntax) -> SyntaxVisitorContinueKind {
    return visitAny(node)
  }
  mutating func visitPost(_ node: UnknownSyntax) {
    return visitAnyPost(node)
  }
}

/// A class version of the `SyntaxVisitor` protocol. This is useful if you
/// intend to have subclasses overriding specific methods of a common base
/// `SyntaxVisitor` class.
///
/// It workarounds the issue of not being able to override the default
/// implementations of the protocol (see https://bugs.swift.org/browse/SR-103).
open class SyntaxVisitorBase: SyntaxVisitor {
  public init() {}

% for node in SYNTAX_NODES:
%   if is_visitable(node):
  open func visit(_ node: ${node.name}) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  open func visitPost(_ node: ${node.name}) {}
%   end
% end

  open func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  open func visitPost(_ node: TokenSyntax) {}

  open func visit(_ node: UnknownSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  open func visitPost(_ node: UnknownSyntax) {}
}

extension _SyntaxBase {
  func walk<Visitor>(_ visitor: inout Visitor) where Visitor : SyntaxVisitor {
    guard isPresent else { return }
    return doVisit(data, &visitor)
  }
}

extension Syntax {
  public func walk<Visitor>(_ visitor: inout Visitor) where Visitor : SyntaxVisitor {
    return base.walk(&visitor)
  }
}

% for node in SYNTAX_NODES:
/// Implementation detail of doVisit(_:_:). Do not call directly.
private func _doVisitImpl${node.name}<Visitor>(
  _ data: SyntaxData, _ visitor: inout Visitor
) where Visitor : SyntaxVisitor  {
%   if node.is_base():
    let node = Unknown${node.name}(data)
    let needsChildren = (visitor.visit(node) == .visitChildren)
    // Avoid casting to `_SyntaxBase` if we don't need to visit children.
    if needsChildren && data.raw.numberOfChildren > 0 {
      visitChildren(data, parent: node, &visitor)
    }
    visitor.visitPost(node)
%   else:
    let node = ${node.name}(data)
    let needsChildren = (visitor.visit(node) == .visitChildren)
    // Avoid casting to `_SyntaxBase` if we don't need to visit children.
    if needsChildren && data.raw.numberOfChildren > 0 {
      visitChildren(data, parent: node, &visitor)
    }
    visitor.visitPost(node)
%   end
}

% end

fileprivate func doVisit<Visitor>(
  _ data: SyntaxData, _ visitor: inout Visitor
) where Visitor : SyntaxVisitor {
  // Create the node types directly instead of going through `makeSyntax()`
  // which has additional cost for casting back and forth from `_SyntaxBase`.
  switch data.raw.kind {
  case .token:
    let node = TokenSyntax(data)
    _ = visitor.visit(node)
    // No children to visit.
    visitor.visitPost(node)
  case .unknown:
    let node = UnknownSyntax(data)
    let needsChildren = (visitor.visit(node) == .visitChildren)
    // Avoid casting to `_SyntaxBase` if we don't need to visit children.
    if needsChildren && data.raw.numberOfChildren > 0 {
      visitChildren(data, parent: node, &visitor)
    }
    visitor.visitPost(node)
  // The implementation of every generated case goes into its own function. This
  // circumvents an issue where the compiler allocates stack space for every
  // case statement next to each other in debug builds, causing it to allocate
  // ~50KB per call to this function. rdar://55929175
% for node in SYNTAX_NODES:
  case .${node.swift_syntax_kind}:
    _doVisitImpl${node.name}(data, &visitor)
% end
  }
}

fileprivate func visitChildren<Visitor>(
  _ data: SyntaxData, parent: _SyntaxBase, _ visitor: inout Visitor
) where Visitor : SyntaxVisitor {
  for childRaw in PresentRawSyntaxChildren(data.absoluteRaw) {
    let childData = SyntaxData(childRaw, parent: parent)
    doVisit(childData, &visitor)
  }
}
