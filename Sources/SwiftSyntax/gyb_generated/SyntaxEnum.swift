//// Automatically Generated From SyntaxNodes.swift.gyb.
//// Do Not Edit Directly!
//===--- SyntaxEnum.swift - Enum for exhaustive Syntax node switching -----===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// Enum to exhaustively switch over all different syntax nodes.
public enum SyntaxEnum {
  case unknown(UnknownSyntax)
  case token(TokenSyntax)
  case decl(UnknownDeclSyntax)
  case expr(UnknownExprSyntax)
  case stmt(UnknownStmtSyntax)
  case type(UnknownTypeSyntax)
  case pattern(UnknownPatternSyntax)
  case unknownDecl(UnknownDeclSyntax)
  case unknownExpr(UnknownExprSyntax)
  case unknownStmt(UnknownStmtSyntax)
  case unknownType(UnknownTypeSyntax)
  case unknownPattern(UnknownPatternSyntax)
  case codeBlockItem(CodeBlockItemSyntax)
  case codeBlockItemList(CodeBlockItemListSyntax)
  case codeBlock(CodeBlockSyntax)
  case inOutExpr(InOutExprSyntax)
  case poundColumnExpr(PoundColumnExprSyntax)
  case tupleExprElementList(TupleExprElementListSyntax)
  case arrayElementList(ArrayElementListSyntax)
  case dictionaryElementList(DictionaryElementListSyntax)
  case stringLiteralSegments(StringLiteralSegmentsSyntax)
  case tryExpr(TryExprSyntax)
  case declNameArgument(DeclNameArgumentSyntax)
  case declNameArgumentList(DeclNameArgumentListSyntax)
  case declNameArguments(DeclNameArgumentsSyntax)
  case identifierExpr(IdentifierExprSyntax)
  case superRefExpr(SuperRefExprSyntax)
  case nilLiteralExpr(NilLiteralExprSyntax)
  case discardAssignmentExpr(DiscardAssignmentExprSyntax)
  case assignmentExpr(AssignmentExprSyntax)
  case sequenceExpr(SequenceExprSyntax)
  case exprList(ExprListSyntax)
  case poundLineExpr(PoundLineExprSyntax)
  case poundFileExpr(PoundFileExprSyntax)
  case poundFilePathExpr(PoundFilePathExprSyntax)
  case poundFunctionExpr(PoundFunctionExprSyntax)
  case poundDsohandleExpr(PoundDsohandleExprSyntax)
  case symbolicReferenceExpr(SymbolicReferenceExprSyntax)
  case prefixOperatorExpr(PrefixOperatorExprSyntax)
  case binaryOperatorExpr(BinaryOperatorExprSyntax)
  case arrowExpr(ArrowExprSyntax)
  case floatLiteralExpr(FloatLiteralExprSyntax)
  case tupleExpr(TupleExprSyntax)
  case arrayExpr(ArrayExprSyntax)
  case dictionaryExpr(DictionaryExprSyntax)
  case tupleExprElement(TupleExprElementSyntax)
  case arrayElement(ArrayElementSyntax)
  case dictionaryElement(DictionaryElementSyntax)
  case integerLiteralExpr(IntegerLiteralExprSyntax)
  case booleanLiteralExpr(BooleanLiteralExprSyntax)
  case ternaryExpr(TernaryExprSyntax)
  case memberAccessExpr(MemberAccessExprSyntax)
  case isExpr(IsExprSyntax)
  case asExpr(AsExprSyntax)
  case typeExpr(TypeExprSyntax)
  case closureCaptureItem(ClosureCaptureItemSyntax)
  case closureCaptureItemList(ClosureCaptureItemListSyntax)
  case closureCaptureSignature(ClosureCaptureSignatureSyntax)
  case closureParam(ClosureParamSyntax)
  case closureParamList(ClosureParamListSyntax)
  case closureSignature(ClosureSignatureSyntax)
  case closureExpr(ClosureExprSyntax)
  case unresolvedPatternExpr(UnresolvedPatternExprSyntax)
  case multipleTrailingClosureElement(MultipleTrailingClosureElementSyntax)
  case multipleTrailingClosureElementList(MultipleTrailingClosureElementListSyntax)
  case multipleTrailingClosureClause(MultipleTrailingClosureClauseSyntax)
  case functionCallExpr(FunctionCallExprSyntax)
  case subscriptExpr(SubscriptExprSyntax)
  case optionalChainingExpr(OptionalChainingExprSyntax)
  case forcedValueExpr(ForcedValueExprSyntax)
  case postfixUnaryExpr(PostfixUnaryExprSyntax)
  case specializeExpr(SpecializeExprSyntax)
  case stringSegment(StringSegmentSyntax)
  case expressionSegment(ExpressionSegmentSyntax)
  case stringLiteralExpr(StringLiteralExprSyntax)
  case keyPathExpr(KeyPathExprSyntax)
  case keyPathBaseExpr(KeyPathBaseExprSyntax)
  case objcNamePiece(ObjcNamePieceSyntax)
  case objcName(ObjcNameSyntax)
  case objcKeyPathExpr(ObjcKeyPathExprSyntax)
  case objcSelectorExpr(ObjcSelectorExprSyntax)
  case editorPlaceholderExpr(EditorPlaceholderExprSyntax)
  case objectLiteralExpr(ObjectLiteralExprSyntax)
  case typeInitializerClause(TypeInitializerClauseSyntax)
  case typealiasDecl(TypealiasDeclSyntax)
  case associatedtypeDecl(AssociatedtypeDeclSyntax)
  case functionParameterList(FunctionParameterListSyntax)
  case parameterClause(ParameterClauseSyntax)
  case returnClause(ReturnClauseSyntax)
  case functionSignature(FunctionSignatureSyntax)
  case ifConfigClause(IfConfigClauseSyntax)
  case ifConfigClauseList(IfConfigClauseListSyntax)
  case ifConfigDecl(IfConfigDeclSyntax)
  case poundErrorDecl(PoundErrorDeclSyntax)
  case poundWarningDecl(PoundWarningDeclSyntax)
  case poundSourceLocation(PoundSourceLocationSyntax)
  case poundSourceLocationArgs(PoundSourceLocationArgsSyntax)
  case declModifier(DeclModifierSyntax)
  case inheritedType(InheritedTypeSyntax)
  case inheritedTypeList(InheritedTypeListSyntax)
  case typeInheritanceClause(TypeInheritanceClauseSyntax)
  case classDecl(ClassDeclSyntax)
  case structDecl(StructDeclSyntax)
  case protocolDecl(ProtocolDeclSyntax)
  case extensionDecl(ExtensionDeclSyntax)
  case memberDeclBlock(MemberDeclBlockSyntax)
  case memberDeclList(MemberDeclListSyntax)
  case memberDeclListItem(MemberDeclListItemSyntax)
  case sourceFile(SourceFileSyntax)
  case initializerClause(InitializerClauseSyntax)
  case functionParameter(FunctionParameterSyntax)
  case modifierList(ModifierListSyntax)
  case functionDecl(FunctionDeclSyntax)
  case initializerDecl(InitializerDeclSyntax)
  case deinitializerDecl(DeinitializerDeclSyntax)
  case subscriptDecl(SubscriptDeclSyntax)
  case accessLevelModifier(AccessLevelModifierSyntax)
  case accessPathComponent(AccessPathComponentSyntax)
  case accessPath(AccessPathSyntax)
  case importDecl(ImportDeclSyntax)
  case accessorParameter(AccessorParameterSyntax)
  case accessorDecl(AccessorDeclSyntax)
  case accessorList(AccessorListSyntax)
  case accessorBlock(AccessorBlockSyntax)
  case patternBinding(PatternBindingSyntax)
  case patternBindingList(PatternBindingListSyntax)
  case variableDecl(VariableDeclSyntax)
  case enumCaseElement(EnumCaseElementSyntax)
  case enumCaseElementList(EnumCaseElementListSyntax)
  case enumCaseDecl(EnumCaseDeclSyntax)
  case enumDecl(EnumDeclSyntax)
  case operatorDecl(OperatorDeclSyntax)
  case identifierList(IdentifierListSyntax)
  case operatorPrecedenceAndTypes(OperatorPrecedenceAndTypesSyntax)
  case precedenceGroupDecl(PrecedenceGroupDeclSyntax)
  case precedenceGroupAttributeList(PrecedenceGroupAttributeListSyntax)
  case precedenceGroupRelation(PrecedenceGroupRelationSyntax)
  case precedenceGroupNameList(PrecedenceGroupNameListSyntax)
  case precedenceGroupNameElement(PrecedenceGroupNameElementSyntax)
  case precedenceGroupAssignment(PrecedenceGroupAssignmentSyntax)
  case precedenceGroupAssociativity(PrecedenceGroupAssociativitySyntax)
  case tokenList(TokenListSyntax)
  case nonEmptyTokenList(NonEmptyTokenListSyntax)
  case customAttribute(CustomAttributeSyntax)
  case attribute(AttributeSyntax)
  case attributeList(AttributeListSyntax)
  case specializeAttributeSpecList(SpecializeAttributeSpecListSyntax)
  case labeledSpecializeEntry(LabeledSpecializeEntrySyntax)
  case namedAttributeStringArgument(NamedAttributeStringArgumentSyntax)
  case declName(DeclNameSyntax)
  case implementsAttributeArguments(ImplementsAttributeArgumentsSyntax)
  case objCSelectorPiece(ObjCSelectorPieceSyntax)
  case objCSelector(ObjCSelectorSyntax)
  case differentiableAttributeArguments(DifferentiableAttributeArgumentsSyntax)
  case differentiationParamsClause(DifferentiationParamsClauseSyntax)
  case differentiationParams(DifferentiationParamsSyntax)
  case differentiationParamList(DifferentiationParamListSyntax)
  case differentiationParam(DifferentiationParamSyntax)
  case differentiableAttributeFuncSpecifier(DifferentiableAttributeFuncSpecifierSyntax)
  case derivativeRegistrationAttributeArguments(DerivativeRegistrationAttributeArgumentsSyntax)
  case qualifiedDeclName(QualifiedDeclNameSyntax)
  case functionDeclName(FunctionDeclNameSyntax)
  case continueStmt(ContinueStmtSyntax)
  case whileStmt(WhileStmtSyntax)
  case deferStmt(DeferStmtSyntax)
  case expressionStmt(ExpressionStmtSyntax)
  case switchCaseList(SwitchCaseListSyntax)
  case repeatWhileStmt(RepeatWhileStmtSyntax)
  case guardStmt(GuardStmtSyntax)
  case whereClause(WhereClauseSyntax)
  case forInStmt(ForInStmtSyntax)
  case switchStmt(SwitchStmtSyntax)
  case catchClauseList(CatchClauseListSyntax)
  case doStmt(DoStmtSyntax)
  case returnStmt(ReturnStmtSyntax)
  case yieldStmt(YieldStmtSyntax)
  case yieldList(YieldListSyntax)
  case fallthroughStmt(FallthroughStmtSyntax)
  case breakStmt(BreakStmtSyntax)
  case caseItemList(CaseItemListSyntax)
  case conditionElement(ConditionElementSyntax)
  case availabilityCondition(AvailabilityConditionSyntax)
  case matchingPatternCondition(MatchingPatternConditionSyntax)
  case optionalBindingCondition(OptionalBindingConditionSyntax)
  case conditionElementList(ConditionElementListSyntax)
  case declarationStmt(DeclarationStmtSyntax)
  case throwStmt(ThrowStmtSyntax)
  case ifStmt(IfStmtSyntax)
  case elseIfContinuation(ElseIfContinuationSyntax)
  case elseBlock(ElseBlockSyntax)
  case switchCase(SwitchCaseSyntax)
  case switchDefaultLabel(SwitchDefaultLabelSyntax)
  case caseItem(CaseItemSyntax)
  case switchCaseLabel(SwitchCaseLabelSyntax)
  case catchClause(CatchClauseSyntax)
  case poundAssertStmt(PoundAssertStmtSyntax)
  case genericWhereClause(GenericWhereClauseSyntax)
  case genericRequirementList(GenericRequirementListSyntax)
  case genericRequirement(GenericRequirementSyntax)
  case sameTypeRequirement(SameTypeRequirementSyntax)
  case genericParameterList(GenericParameterListSyntax)
  case genericParameter(GenericParameterSyntax)
  case genericParameterClause(GenericParameterClauseSyntax)
  case conformanceRequirement(ConformanceRequirementSyntax)
  case simpleTypeIdentifier(SimpleTypeIdentifierSyntax)
  case memberTypeIdentifier(MemberTypeIdentifierSyntax)
  case classRestrictionType(ClassRestrictionTypeSyntax)
  case arrayType(ArrayTypeSyntax)
  case dictionaryType(DictionaryTypeSyntax)
  case metatypeType(MetatypeTypeSyntax)
  case optionalType(OptionalTypeSyntax)
  case someType(SomeTypeSyntax)
  case implicitlyUnwrappedOptionalType(ImplicitlyUnwrappedOptionalTypeSyntax)
  case compositionTypeElement(CompositionTypeElementSyntax)
  case compositionTypeElementList(CompositionTypeElementListSyntax)
  case compositionType(CompositionTypeSyntax)
  case tupleTypeElement(TupleTypeElementSyntax)
  case tupleTypeElementList(TupleTypeElementListSyntax)
  case tupleType(TupleTypeSyntax)
  case functionType(FunctionTypeSyntax)
  case attributedType(AttributedTypeSyntax)
  case genericArgumentList(GenericArgumentListSyntax)
  case genericArgument(GenericArgumentSyntax)
  case genericArgumentClause(GenericArgumentClauseSyntax)
  case typeAnnotation(TypeAnnotationSyntax)
  case enumCasePattern(EnumCasePatternSyntax)
  case isTypePattern(IsTypePatternSyntax)
  case optionalPattern(OptionalPatternSyntax)
  case identifierPattern(IdentifierPatternSyntax)
  case asTypePattern(AsTypePatternSyntax)
  case tuplePattern(TuplePatternSyntax)
  case wildcardPattern(WildcardPatternSyntax)
  case tuplePatternElement(TuplePatternElementSyntax)
  case expressionPattern(ExpressionPatternSyntax)
  case tuplePatternElementList(TuplePatternElementListSyntax)
  case valueBindingPattern(ValueBindingPatternSyntax)
  case availabilitySpecList(AvailabilitySpecListSyntax)
  case availabilityArgument(AvailabilityArgumentSyntax)
  case availabilityLabeledArgument(AvailabilityLabeledArgumentSyntax)
  case availabilityVersionRestriction(AvailabilityVersionRestrictionSyntax)
  case versionTuple(VersionTupleSyntax)
}

public extension Syntax {
  /// Get an enum that can be used to exhaustively switch over all syntax nodes.
  func `as`(_: SyntaxEnum.Type) -> SyntaxEnum {
    switch raw.kind {
    case .token:
      return .token(TokenSyntax(self)!)
    case .unknown:
      return .unknown(UnknownSyntax(self)!)
    case .decl:
      return .decl(UnknownDeclSyntax(self)!)
    case .expr:
      return .expr(UnknownExprSyntax(self)!)
    case .stmt:
      return .stmt(UnknownStmtSyntax(self)!)
    case .type:
      return .type(UnknownTypeSyntax(self)!)
    case .pattern:
      return .pattern(UnknownPatternSyntax(self)!)
    case .unknownDecl:
      return .unknownDecl(UnknownDeclSyntax(self)!)
    case .unknownExpr:
      return .unknownExpr(UnknownExprSyntax(self)!)
    case .unknownStmt:
      return .unknownStmt(UnknownStmtSyntax(self)!)
    case .unknownType:
      return .unknownType(UnknownTypeSyntax(self)!)
    case .unknownPattern:
      return .unknownPattern(UnknownPatternSyntax(self)!)
    case .codeBlockItem:
      return .codeBlockItem(CodeBlockItemSyntax(self)!)
    case .codeBlockItemList:
      return .codeBlockItemList(CodeBlockItemListSyntax(self)!)
    case .codeBlock:
      return .codeBlock(CodeBlockSyntax(self)!)
    case .inOutExpr:
      return .inOutExpr(InOutExprSyntax(self)!)
    case .poundColumnExpr:
      return .poundColumnExpr(PoundColumnExprSyntax(self)!)
    case .tupleExprElementList:
      return .tupleExprElementList(TupleExprElementListSyntax(self)!)
    case .arrayElementList:
      return .arrayElementList(ArrayElementListSyntax(self)!)
    case .dictionaryElementList:
      return .dictionaryElementList(DictionaryElementListSyntax(self)!)
    case .stringLiteralSegments:
      return .stringLiteralSegments(StringLiteralSegmentsSyntax(self)!)
    case .tryExpr:
      return .tryExpr(TryExprSyntax(self)!)
    case .declNameArgument:
      return .declNameArgument(DeclNameArgumentSyntax(self)!)
    case .declNameArgumentList:
      return .declNameArgumentList(DeclNameArgumentListSyntax(self)!)
    case .declNameArguments:
      return .declNameArguments(DeclNameArgumentsSyntax(self)!)
    case .identifierExpr:
      return .identifierExpr(IdentifierExprSyntax(self)!)
    case .superRefExpr:
      return .superRefExpr(SuperRefExprSyntax(self)!)
    case .nilLiteralExpr:
      return .nilLiteralExpr(NilLiteralExprSyntax(self)!)
    case .discardAssignmentExpr:
      return .discardAssignmentExpr(DiscardAssignmentExprSyntax(self)!)
    case .assignmentExpr:
      return .assignmentExpr(AssignmentExprSyntax(self)!)
    case .sequenceExpr:
      return .sequenceExpr(SequenceExprSyntax(self)!)
    case .exprList:
      return .exprList(ExprListSyntax(self)!)
    case .poundLineExpr:
      return .poundLineExpr(PoundLineExprSyntax(self)!)
    case .poundFileExpr:
      return .poundFileExpr(PoundFileExprSyntax(self)!)
    case .poundFilePathExpr:
      return .poundFilePathExpr(PoundFilePathExprSyntax(self)!)
    case .poundFunctionExpr:
      return .poundFunctionExpr(PoundFunctionExprSyntax(self)!)
    case .poundDsohandleExpr:
      return .poundDsohandleExpr(PoundDsohandleExprSyntax(self)!)
    case .symbolicReferenceExpr:
      return .symbolicReferenceExpr(SymbolicReferenceExprSyntax(self)!)
    case .prefixOperatorExpr:
      return .prefixOperatorExpr(PrefixOperatorExprSyntax(self)!)
    case .binaryOperatorExpr:
      return .binaryOperatorExpr(BinaryOperatorExprSyntax(self)!)
    case .arrowExpr:
      return .arrowExpr(ArrowExprSyntax(self)!)
    case .floatLiteralExpr:
      return .floatLiteralExpr(FloatLiteralExprSyntax(self)!)
    case .tupleExpr:
      return .tupleExpr(TupleExprSyntax(self)!)
    case .arrayExpr:
      return .arrayExpr(ArrayExprSyntax(self)!)
    case .dictionaryExpr:
      return .dictionaryExpr(DictionaryExprSyntax(self)!)
    case .tupleExprElement:
      return .tupleExprElement(TupleExprElementSyntax(self)!)
    case .arrayElement:
      return .arrayElement(ArrayElementSyntax(self)!)
    case .dictionaryElement:
      return .dictionaryElement(DictionaryElementSyntax(self)!)
    case .integerLiteralExpr:
      return .integerLiteralExpr(IntegerLiteralExprSyntax(self)!)
    case .booleanLiteralExpr:
      return .booleanLiteralExpr(BooleanLiteralExprSyntax(self)!)
    case .ternaryExpr:
      return .ternaryExpr(TernaryExprSyntax(self)!)
    case .memberAccessExpr:
      return .memberAccessExpr(MemberAccessExprSyntax(self)!)
    case .isExpr:
      return .isExpr(IsExprSyntax(self)!)
    case .asExpr:
      return .asExpr(AsExprSyntax(self)!)
    case .typeExpr:
      return .typeExpr(TypeExprSyntax(self)!)
    case .closureCaptureItem:
      return .closureCaptureItem(ClosureCaptureItemSyntax(self)!)
    case .closureCaptureItemList:
      return .closureCaptureItemList(ClosureCaptureItemListSyntax(self)!)
    case .closureCaptureSignature:
      return .closureCaptureSignature(ClosureCaptureSignatureSyntax(self)!)
    case .closureParam:
      return .closureParam(ClosureParamSyntax(self)!)
    case .closureParamList:
      return .closureParamList(ClosureParamListSyntax(self)!)
    case .closureSignature:
      return .closureSignature(ClosureSignatureSyntax(self)!)
    case .closureExpr:
      return .closureExpr(ClosureExprSyntax(self)!)
    case .unresolvedPatternExpr:
      return .unresolvedPatternExpr(UnresolvedPatternExprSyntax(self)!)
    case .multipleTrailingClosureElement:
      return .multipleTrailingClosureElement(MultipleTrailingClosureElementSyntax(self)!)
    case .multipleTrailingClosureElementList:
      return .multipleTrailingClosureElementList(MultipleTrailingClosureElementListSyntax(self)!)
    case .multipleTrailingClosureClause:
      return .multipleTrailingClosureClause(MultipleTrailingClosureClauseSyntax(self)!)
    case .functionCallExpr:
      return .functionCallExpr(FunctionCallExprSyntax(self)!)
    case .subscriptExpr:
      return .subscriptExpr(SubscriptExprSyntax(self)!)
    case .optionalChainingExpr:
      return .optionalChainingExpr(OptionalChainingExprSyntax(self)!)
    case .forcedValueExpr:
      return .forcedValueExpr(ForcedValueExprSyntax(self)!)
    case .postfixUnaryExpr:
      return .postfixUnaryExpr(PostfixUnaryExprSyntax(self)!)
    case .specializeExpr:
      return .specializeExpr(SpecializeExprSyntax(self)!)
    case .stringSegment:
      return .stringSegment(StringSegmentSyntax(self)!)
    case .expressionSegment:
      return .expressionSegment(ExpressionSegmentSyntax(self)!)
    case .stringLiteralExpr:
      return .stringLiteralExpr(StringLiteralExprSyntax(self)!)
    case .keyPathExpr:
      return .keyPathExpr(KeyPathExprSyntax(self)!)
    case .keyPathBaseExpr:
      return .keyPathBaseExpr(KeyPathBaseExprSyntax(self)!)
    case .objcNamePiece:
      return .objcNamePiece(ObjcNamePieceSyntax(self)!)
    case .objcName:
      return .objcName(ObjcNameSyntax(self)!)
    case .objcKeyPathExpr:
      return .objcKeyPathExpr(ObjcKeyPathExprSyntax(self)!)
    case .objcSelectorExpr:
      return .objcSelectorExpr(ObjcSelectorExprSyntax(self)!)
    case .editorPlaceholderExpr:
      return .editorPlaceholderExpr(EditorPlaceholderExprSyntax(self)!)
    case .objectLiteralExpr:
      return .objectLiteralExpr(ObjectLiteralExprSyntax(self)!)
    case .typeInitializerClause:
      return .typeInitializerClause(TypeInitializerClauseSyntax(self)!)
    case .typealiasDecl:
      return .typealiasDecl(TypealiasDeclSyntax(self)!)
    case .associatedtypeDecl:
      return .associatedtypeDecl(AssociatedtypeDeclSyntax(self)!)
    case .functionParameterList:
      return .functionParameterList(FunctionParameterListSyntax(self)!)
    case .parameterClause:
      return .parameterClause(ParameterClauseSyntax(self)!)
    case .returnClause:
      return .returnClause(ReturnClauseSyntax(self)!)
    case .functionSignature:
      return .functionSignature(FunctionSignatureSyntax(self)!)
    case .ifConfigClause:
      return .ifConfigClause(IfConfigClauseSyntax(self)!)
    case .ifConfigClauseList:
      return .ifConfigClauseList(IfConfigClauseListSyntax(self)!)
    case .ifConfigDecl:
      return .ifConfigDecl(IfConfigDeclSyntax(self)!)
    case .poundErrorDecl:
      return .poundErrorDecl(PoundErrorDeclSyntax(self)!)
    case .poundWarningDecl:
      return .poundWarningDecl(PoundWarningDeclSyntax(self)!)
    case .poundSourceLocation:
      return .poundSourceLocation(PoundSourceLocationSyntax(self)!)
    case .poundSourceLocationArgs:
      return .poundSourceLocationArgs(PoundSourceLocationArgsSyntax(self)!)
    case .declModifier:
      return .declModifier(DeclModifierSyntax(self)!)
    case .inheritedType:
      return .inheritedType(InheritedTypeSyntax(self)!)
    case .inheritedTypeList:
      return .inheritedTypeList(InheritedTypeListSyntax(self)!)
    case .typeInheritanceClause:
      return .typeInheritanceClause(TypeInheritanceClauseSyntax(self)!)
    case .classDecl:
      return .classDecl(ClassDeclSyntax(self)!)
    case .structDecl:
      return .structDecl(StructDeclSyntax(self)!)
    case .protocolDecl:
      return .protocolDecl(ProtocolDeclSyntax(self)!)
    case .extensionDecl:
      return .extensionDecl(ExtensionDeclSyntax(self)!)
    case .memberDeclBlock:
      return .memberDeclBlock(MemberDeclBlockSyntax(self)!)
    case .memberDeclList:
      return .memberDeclList(MemberDeclListSyntax(self)!)
    case .memberDeclListItem:
      return .memberDeclListItem(MemberDeclListItemSyntax(self)!)
    case .sourceFile:
      return .sourceFile(SourceFileSyntax(self)!)
    case .initializerClause:
      return .initializerClause(InitializerClauseSyntax(self)!)
    case .functionParameter:
      return .functionParameter(FunctionParameterSyntax(self)!)
    case .modifierList:
      return .modifierList(ModifierListSyntax(self)!)
    case .functionDecl:
      return .functionDecl(FunctionDeclSyntax(self)!)
    case .initializerDecl:
      return .initializerDecl(InitializerDeclSyntax(self)!)
    case .deinitializerDecl:
      return .deinitializerDecl(DeinitializerDeclSyntax(self)!)
    case .subscriptDecl:
      return .subscriptDecl(SubscriptDeclSyntax(self)!)
    case .accessLevelModifier:
      return .accessLevelModifier(AccessLevelModifierSyntax(self)!)
    case .accessPathComponent:
      return .accessPathComponent(AccessPathComponentSyntax(self)!)
    case .accessPath:
      return .accessPath(AccessPathSyntax(self)!)
    case .importDecl:
      return .importDecl(ImportDeclSyntax(self)!)
    case .accessorParameter:
      return .accessorParameter(AccessorParameterSyntax(self)!)
    case .accessorDecl:
      return .accessorDecl(AccessorDeclSyntax(self)!)
    case .accessorList:
      return .accessorList(AccessorListSyntax(self)!)
    case .accessorBlock:
      return .accessorBlock(AccessorBlockSyntax(self)!)
    case .patternBinding:
      return .patternBinding(PatternBindingSyntax(self)!)
    case .patternBindingList:
      return .patternBindingList(PatternBindingListSyntax(self)!)
    case .variableDecl:
      return .variableDecl(VariableDeclSyntax(self)!)
    case .enumCaseElement:
      return .enumCaseElement(EnumCaseElementSyntax(self)!)
    case .enumCaseElementList:
      return .enumCaseElementList(EnumCaseElementListSyntax(self)!)
    case .enumCaseDecl:
      return .enumCaseDecl(EnumCaseDeclSyntax(self)!)
    case .enumDecl:
      return .enumDecl(EnumDeclSyntax(self)!)
    case .operatorDecl:
      return .operatorDecl(OperatorDeclSyntax(self)!)
    case .identifierList:
      return .identifierList(IdentifierListSyntax(self)!)
    case .operatorPrecedenceAndTypes:
      return .operatorPrecedenceAndTypes(OperatorPrecedenceAndTypesSyntax(self)!)
    case .precedenceGroupDecl:
      return .precedenceGroupDecl(PrecedenceGroupDeclSyntax(self)!)
    case .precedenceGroupAttributeList:
      return .precedenceGroupAttributeList(PrecedenceGroupAttributeListSyntax(self)!)
    case .precedenceGroupRelation:
      return .precedenceGroupRelation(PrecedenceGroupRelationSyntax(self)!)
    case .precedenceGroupNameList:
      return .precedenceGroupNameList(PrecedenceGroupNameListSyntax(self)!)
    case .precedenceGroupNameElement:
      return .precedenceGroupNameElement(PrecedenceGroupNameElementSyntax(self)!)
    case .precedenceGroupAssignment:
      return .precedenceGroupAssignment(PrecedenceGroupAssignmentSyntax(self)!)
    case .precedenceGroupAssociativity:
      return .precedenceGroupAssociativity(PrecedenceGroupAssociativitySyntax(self)!)
    case .tokenList:
      return .tokenList(TokenListSyntax(self)!)
    case .nonEmptyTokenList:
      return .nonEmptyTokenList(NonEmptyTokenListSyntax(self)!)
    case .customAttribute:
      return .customAttribute(CustomAttributeSyntax(self)!)
    case .attribute:
      return .attribute(AttributeSyntax(self)!)
    case .attributeList:
      return .attributeList(AttributeListSyntax(self)!)
    case .specializeAttributeSpecList:
      return .specializeAttributeSpecList(SpecializeAttributeSpecListSyntax(self)!)
    case .labeledSpecializeEntry:
      return .labeledSpecializeEntry(LabeledSpecializeEntrySyntax(self)!)
    case .namedAttributeStringArgument:
      return .namedAttributeStringArgument(NamedAttributeStringArgumentSyntax(self)!)
    case .declName:
      return .declName(DeclNameSyntax(self)!)
    case .implementsAttributeArguments:
      return .implementsAttributeArguments(ImplementsAttributeArgumentsSyntax(self)!)
    case .objCSelectorPiece:
      return .objCSelectorPiece(ObjCSelectorPieceSyntax(self)!)
    case .objCSelector:
      return .objCSelector(ObjCSelectorSyntax(self)!)
    case .differentiableAttributeArguments:
      return .differentiableAttributeArguments(DifferentiableAttributeArgumentsSyntax(self)!)
    case .differentiationParamsClause:
      return .differentiationParamsClause(DifferentiationParamsClauseSyntax(self)!)
    case .differentiationParams:
      return .differentiationParams(DifferentiationParamsSyntax(self)!)
    case .differentiationParamList:
      return .differentiationParamList(DifferentiationParamListSyntax(self)!)
    case .differentiationParam:
      return .differentiationParam(DifferentiationParamSyntax(self)!)
    case .differentiableAttributeFuncSpecifier:
      return .differentiableAttributeFuncSpecifier(DifferentiableAttributeFuncSpecifierSyntax(self)!)
    case .derivativeRegistrationAttributeArguments:
      return .derivativeRegistrationAttributeArguments(DerivativeRegistrationAttributeArgumentsSyntax(self)!)
    case .qualifiedDeclName:
      return .qualifiedDeclName(QualifiedDeclNameSyntax(self)!)
    case .functionDeclName:
      return .functionDeclName(FunctionDeclNameSyntax(self)!)
    case .continueStmt:
      return .continueStmt(ContinueStmtSyntax(self)!)
    case .whileStmt:
      return .whileStmt(WhileStmtSyntax(self)!)
    case .deferStmt:
      return .deferStmt(DeferStmtSyntax(self)!)
    case .expressionStmt:
      return .expressionStmt(ExpressionStmtSyntax(self)!)
    case .switchCaseList:
      return .switchCaseList(SwitchCaseListSyntax(self)!)
    case .repeatWhileStmt:
      return .repeatWhileStmt(RepeatWhileStmtSyntax(self)!)
    case .guardStmt:
      return .guardStmt(GuardStmtSyntax(self)!)
    case .whereClause:
      return .whereClause(WhereClauseSyntax(self)!)
    case .forInStmt:
      return .forInStmt(ForInStmtSyntax(self)!)
    case .switchStmt:
      return .switchStmt(SwitchStmtSyntax(self)!)
    case .catchClauseList:
      return .catchClauseList(CatchClauseListSyntax(self)!)
    case .doStmt:
      return .doStmt(DoStmtSyntax(self)!)
    case .returnStmt:
      return .returnStmt(ReturnStmtSyntax(self)!)
    case .yieldStmt:
      return .yieldStmt(YieldStmtSyntax(self)!)
    case .yieldList:
      return .yieldList(YieldListSyntax(self)!)
    case .fallthroughStmt:
      return .fallthroughStmt(FallthroughStmtSyntax(self)!)
    case .breakStmt:
      return .breakStmt(BreakStmtSyntax(self)!)
    case .caseItemList:
      return .caseItemList(CaseItemListSyntax(self)!)
    case .conditionElement:
      return .conditionElement(ConditionElementSyntax(self)!)
    case .availabilityCondition:
      return .availabilityCondition(AvailabilityConditionSyntax(self)!)
    case .matchingPatternCondition:
      return .matchingPatternCondition(MatchingPatternConditionSyntax(self)!)
    case .optionalBindingCondition:
      return .optionalBindingCondition(OptionalBindingConditionSyntax(self)!)
    case .conditionElementList:
      return .conditionElementList(ConditionElementListSyntax(self)!)
    case .declarationStmt:
      return .declarationStmt(DeclarationStmtSyntax(self)!)
    case .throwStmt:
      return .throwStmt(ThrowStmtSyntax(self)!)
    case .ifStmt:
      return .ifStmt(IfStmtSyntax(self)!)
    case .elseIfContinuation:
      return .elseIfContinuation(ElseIfContinuationSyntax(self)!)
    case .elseBlock:
      return .elseBlock(ElseBlockSyntax(self)!)
    case .switchCase:
      return .switchCase(SwitchCaseSyntax(self)!)
    case .switchDefaultLabel:
      return .switchDefaultLabel(SwitchDefaultLabelSyntax(self)!)
    case .caseItem:
      return .caseItem(CaseItemSyntax(self)!)
    case .switchCaseLabel:
      return .switchCaseLabel(SwitchCaseLabelSyntax(self)!)
    case .catchClause:
      return .catchClause(CatchClauseSyntax(self)!)
    case .poundAssertStmt:
      return .poundAssertStmt(PoundAssertStmtSyntax(self)!)
    case .genericWhereClause:
      return .genericWhereClause(GenericWhereClauseSyntax(self)!)
    case .genericRequirementList:
      return .genericRequirementList(GenericRequirementListSyntax(self)!)
    case .genericRequirement:
      return .genericRequirement(GenericRequirementSyntax(self)!)
    case .sameTypeRequirement:
      return .sameTypeRequirement(SameTypeRequirementSyntax(self)!)
    case .genericParameterList:
      return .genericParameterList(GenericParameterListSyntax(self)!)
    case .genericParameter:
      return .genericParameter(GenericParameterSyntax(self)!)
    case .genericParameterClause:
      return .genericParameterClause(GenericParameterClauseSyntax(self)!)
    case .conformanceRequirement:
      return .conformanceRequirement(ConformanceRequirementSyntax(self)!)
    case .simpleTypeIdentifier:
      return .simpleTypeIdentifier(SimpleTypeIdentifierSyntax(self)!)
    case .memberTypeIdentifier:
      return .memberTypeIdentifier(MemberTypeIdentifierSyntax(self)!)
    case .classRestrictionType:
      return .classRestrictionType(ClassRestrictionTypeSyntax(self)!)
    case .arrayType:
      return .arrayType(ArrayTypeSyntax(self)!)
    case .dictionaryType:
      return .dictionaryType(DictionaryTypeSyntax(self)!)
    case .metatypeType:
      return .metatypeType(MetatypeTypeSyntax(self)!)
    case .optionalType:
      return .optionalType(OptionalTypeSyntax(self)!)
    case .someType:
      return .someType(SomeTypeSyntax(self)!)
    case .implicitlyUnwrappedOptionalType:
      return .implicitlyUnwrappedOptionalType(ImplicitlyUnwrappedOptionalTypeSyntax(self)!)
    case .compositionTypeElement:
      return .compositionTypeElement(CompositionTypeElementSyntax(self)!)
    case .compositionTypeElementList:
      return .compositionTypeElementList(CompositionTypeElementListSyntax(self)!)
    case .compositionType:
      return .compositionType(CompositionTypeSyntax(self)!)
    case .tupleTypeElement:
      return .tupleTypeElement(TupleTypeElementSyntax(self)!)
    case .tupleTypeElementList:
      return .tupleTypeElementList(TupleTypeElementListSyntax(self)!)
    case .tupleType:
      return .tupleType(TupleTypeSyntax(self)!)
    case .functionType:
      return .functionType(FunctionTypeSyntax(self)!)
    case .attributedType:
      return .attributedType(AttributedTypeSyntax(self)!)
    case .genericArgumentList:
      return .genericArgumentList(GenericArgumentListSyntax(self)!)
    case .genericArgument:
      return .genericArgument(GenericArgumentSyntax(self)!)
    case .genericArgumentClause:
      return .genericArgumentClause(GenericArgumentClauseSyntax(self)!)
    case .typeAnnotation:
      return .typeAnnotation(TypeAnnotationSyntax(self)!)
    case .enumCasePattern:
      return .enumCasePattern(EnumCasePatternSyntax(self)!)
    case .isTypePattern:
      return .isTypePattern(IsTypePatternSyntax(self)!)
    case .optionalPattern:
      return .optionalPattern(OptionalPatternSyntax(self)!)
    case .identifierPattern:
      return .identifierPattern(IdentifierPatternSyntax(self)!)
    case .asTypePattern:
      return .asTypePattern(AsTypePatternSyntax(self)!)
    case .tuplePattern:
      return .tuplePattern(TuplePatternSyntax(self)!)
    case .wildcardPattern:
      return .wildcardPattern(WildcardPatternSyntax(self)!)
    case .tuplePatternElement:
      return .tuplePatternElement(TuplePatternElementSyntax(self)!)
    case .expressionPattern:
      return .expressionPattern(ExpressionPatternSyntax(self)!)
    case .tuplePatternElementList:
      return .tuplePatternElementList(TuplePatternElementListSyntax(self)!)
    case .valueBindingPattern:
      return .valueBindingPattern(ValueBindingPatternSyntax(self)!)
    case .availabilitySpecList:
      return .availabilitySpecList(AvailabilitySpecListSyntax(self)!)
    case .availabilityArgument:
      return .availabilityArgument(AvailabilityArgumentSyntax(self)!)
    case .availabilityLabeledArgument:
      return .availabilityLabeledArgument(AvailabilityLabeledArgumentSyntax(self)!)
    case .availabilityVersionRestriction:
      return .availabilityVersionRestriction(AvailabilityVersionRestrictionSyntax(self)!)
    case .versionTuple:
      return .versionTuple(VersionTupleSyntax(self)!)
    }
  }
}
