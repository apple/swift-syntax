%{
  # -*- mode: Swift -*-
  from gyb_syntax_support.Trivia import TRIVIAS
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From Trivia.swift.gyb.
//// Do Not Edit Directly!
//===------------------- Trivia.swift - Source Trivia Enum ----------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import Foundation

/// A contiguous stretch of a single kind of trivia. The constituent part of
/// a `Trivia` collection.
///
/// For example, four spaces would be represented by
/// `.spaces(4)`
///
/// In general, you should deal with the actual Trivia collection instead
/// of individual pieces whenever possible.
public enum TriviaPiece {
% for trivia in TRIVIAS:
    /// ${trivia.comment}
%   if trivia.is_collection():
    case ${trivia.lower_name}s(Int)
%   else:
    case ${trivia.lower_name}(String)
%   end
% end
}

extension TriviaPiece: TextOutputStreamable {
  /// Prints the provided trivia as they would be written in a source file.
  ///
  /// - Parameter stream: The stream to which to print the trivia.
  public func write<Target>(to target: inout Target)
    where Target: TextOutputStream {
    func printRepeated(_ character: String, count: Int) {
      for _ in 0..<count { target.write(character) }
    }
    switch self {
% for trivia in TRIVIAS:
%   if trivia.is_collection():
%   joined = ''.join(trivia.swift_characters)
    case let .${trivia.lower_name}s(count):
      printRepeated("${joined}", count: count)
%   else:
    case let .${trivia.lower_name}(text):
      target.write(text)
%   end
% end
    }
  }
}

extension TriviaPiece: CustomDebugStringConvertible {
  /// Returns a description used by dump.
  public var debugDescription: String {
    return "TriviaPiece"
  }
}

/// A collection of leading or trailing trivia. This is the main data structure
/// for thinking about trivia.
public struct Trivia {
  let pieces: [TriviaPiece]

  /// Creates Trivia with the provided underlying pieces.
  public init(pieces: [TriviaPiece]) {
    self.pieces = pieces
  }

  /// Creates Trivia with no pieces.
  public static var zero: Trivia {
    return Trivia(pieces: [])
  }

  /// Creates a new `Trivia` by appending the provided `TriviaPiece` to the end.
  public func appending(_ piece: TriviaPiece) -> Trivia {
    var copy = pieces
    copy.append(piece)
    return Trivia(pieces: copy)
  }

  public var sourceLength: SourceLength {
    return pieces.map({ $0.sourceLength }).reduce(.zero, +)
  }

  /// Get the byteSize of this trivia
  public var byteSize: Int {
    return sourceLength.utf8Length
  }

% for trivia in TRIVIAS:
%   if trivia.is_collection():
%   joined = ''.join(trivia.swift_characters)
    /// Return a piece of trivia for some number of '${joined}' characters.
    public static func ${trivia.lower_name}s(_ count: Int) -> Trivia {
      return [.${trivia.lower_name}s(count)]
    }
%   else:
    /// Return a piece of trivia for ${trivia.name}.
    public static func ${trivia.lower_name}(_ text: String) -> Trivia {
      return [.${trivia.lower_name}(text)]
    }
%   end
% end
}

extension Trivia: Equatable {}

/// Conformance for Trivia to the Collection protocol.
extension Trivia: Collection {
  public var startIndex: Int {
    return pieces.startIndex
  }

  public var endIndex: Int {
    return pieces.endIndex
  }

  public func index(after i: Int) -> Int {
    return pieces.index(after: i)
  }

  public subscript(_ index: Int) -> TriviaPiece {
    return pieces[index]
  }
}


extension Trivia: ExpressibleByArrayLiteral {
  /// Creates Trivia from the provided pieces.
  public init(arrayLiteral elements: TriviaPiece...) {
    self.pieces = elements
  }
}

/// Concatenates two collections of `Trivia` into one collection.
public func +(lhs: Trivia, rhs: Trivia) -> Trivia {
  return Trivia(pieces: lhs.pieces + rhs.pieces)
}

extension TriviaPiece: Equatable {}

extension TriviaPiece {
  public var sourceLength: SourceLength {
    switch self {
% for trivia in TRIVIAS:
%   if trivia.is_new_line:
    case let .${trivia.lower_name}s(count):
      return SourceLength(utf8Length: count * ${trivia.characters_len()})
%   elif trivia.is_collection():
    case let .${trivia.lower_name}s(count):
      return SourceLength(utf8Length: count)
%   else:
    case let .${trivia.lower_name}(text):
      return SourceLength(of: text)
%   end
% end
    }
  }
}

extension TriviaPiece {
  static func fromRawValue(_ piece: CTriviaPiece,
                           textBuffer: UnsafeBufferPointer<UInt8>) -> TriviaPiece {
    switch piece.kind {
% for trivia in TRIVIAS:
    case ${trivia.serialization_code}:
%   if trivia.is_collection():
      return .${trivia.lower_name}s(Int(piece.length)/${trivia.characters_len()})
%   else:
      return .${trivia.lower_name}(.fromBuffer(textBuffer))
%   end
% end
    default:
      fatalError("unexpected trivia piece kind \(piece.kind)")
    }
  }

  static func hasText(kind: CTriviaKind) -> Bool {
    switch kind {
% for trivia in TRIVIAS:
    case ${trivia.serialization_code}:
%   if trivia.is_collection():
      return false
%   else:
      return true
%   end
% end
    default:
      fatalError("unexpected trivia piece kind \(kind)")
    }
  }
}

/// Plain trivia piece kind value, without an associated `String` value.
internal enum TriviaPieceKind: CTriviaKind {
% for trivia in TRIVIAS:
    /// ${trivia.comment}
%   if trivia.is_collection():
    case ${trivia.lower_name}s = ${trivia.serialization_code}
%   else:
    case ${trivia.lower_name} = ${trivia.serialization_code}
%   end
% end

  static func fromRawValue(_ rawValue: CTriviaKind) -> TriviaPieceKind {
    return TriviaPieceKind(rawValue: rawValue)!
  }
}

extension TriviaPiece {
  internal func withUnsafeTriviaPiece<Result>(
    _ body: (UnsafeTriviaPiece) -> Result
  ) -> Result {
    switch self {
% for trivia in TRIVIAS:
%   if trivia.is_new_line:
    case let .${trivia.lower_name}s(count):
      let length = count * ${trivia.characters_len()}
      return body(.init(kind: .${trivia.lower_name}s, length: length))
%   elif trivia.is_collection():
    case let .${trivia.lower_name}s(count):
      let length = count
      return body(.init(kind: .${trivia.lower_name}s, length: length))
%   else:
    case var .${trivia.lower_name}(text):
      text.makeContiguousUTF8()
      let length = text.utf8.count
      return text.utf8.withContiguousStorageIfAvailable({ (buf: UnsafeBufferPointer<UInt8>) in
        return body(.init(kind: .${trivia.lower_name}, length: length, customText: buf))
      })!
%   end
% end
    }
  }
}

extension Trivia: TextOutputStreamable {
  /// Prints the provided trivia as they would be written in a source file.
  ///
  /// - Parameter stream: The stream to which to print the trivia.
  public func write<Target>(to target: inout Target)
    where Target: TextOutputStream {
    target.write("'")
    for piece in pieces {
      piece.write(to: &target)
    }
    target.write("'")
  }
}
